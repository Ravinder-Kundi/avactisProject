{"name": "test_customer_signIn[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 93\nCurrent browser version is 96.0.4664.110 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x0043A2D3+2663123]\n\tOrdinal0 [0x003CA491+2204817]\n\tOrdinal0 [0x002B2118+1057048]\n\tOrdinal0 [0x002D041A+1180698]\n\tOrdinal0 [0x002CC335+1164085]\n\tOrdinal0 [0x002C9B7F+1153919]\n\tOrdinal0 [0x002F9D8F+1351055]\n\tOrdinal0 [0x002F99FA+1350138]\n\tOrdinal0 [0x002F589B+1333403]\n\tOrdinal0 [0x002D1F74+1187700]\n\tOrdinal0 [0x002D2DC9+1191369]\n\tGetHandleVerifier [0x005D30D6+1610054]\n\tGetHandleVerifier [0x0067B53B+2299307]\n\tGetHandleVerifier [0x004C8DA9+519705]\n\tGetHandleVerifier [0x004C7759+513993]\n\tOrdinal0 [0x003D112D+2232621]\n\tOrdinal0 [0x003D55F8+2250232]\n\tOrdinal0 [0x003D5732+2250546]\n\tOrdinal0 [0x003DE591+2286993]\n\tBaseThreadInitThunk [0x76FDFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x778D7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x778D7A6E+238]", "trace": "request = <SubRequest 'init_driver' for <Function test_customer_signIn[chrome]>>\n\n    @pytest.fixture(params=['chrome'],scope='class')\n    def init_driver(request):\n        if request.param == \"edge\":\n            value = webdriver.Edge(executable_path=\"resources/msedgedriver.exe\")\n            print(\"****** Browser MS Edge ******\")\n        if request.param == \"firefox\":\n            value = webdriver.Firefox(executable_path=\"resources/geckodriver.exe\")\n            print(\"****** Browser Firefox ******\")\n        if request.param == \"chrome\":\n>           value = webdriver.Chrome(executable_path=\"resources/chromedriver.exe\")\n\ntestCases\\conftest.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:268: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:359: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021C1BA32730>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x778D7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x778D7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 93\nE       Current browser version is 96.0.4664.110 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x0043A2D3+2663123]\nE       \tOrdinal0 [0x003CA491+2204817]\nE       \tOrdinal0 [0x002B2118+1057048]\nE       \tOrdinal0 [0x002D041A+1180698]\nE       \tOrdinal0 [0x002CC335+1164085]\nE       \tOrdinal0 [0x002C9B7F+1153919]\nE       \tOrdinal0 [0x002F9D8F+1351055]\nE       \tOrdinal0 [0x002F99FA+1350138]\nE       \tOrdinal0 [0x002F589B+1333403]\nE       \tOrdinal0 [0x002D1F74+1187700]\nE       \tOrdinal0 [0x002D2DC9+1191369]\nE       \tGetHandleVerifier [0x005D30D6+1610054]\nE       \tGetHandleVerifier [0x0067B53B+2299307]\nE       \tGetHandleVerifier [0x004C8DA9+519705]\nE       \tGetHandleVerifier [0x004C7759+513993]\nE       \tOrdinal0 [0x003D112D+2232621]\nE       \tOrdinal0 [0x003D55F8+2250232]\nE       \tOrdinal0 [0x003D5732+2250546]\nE       \tOrdinal0 [0x003DE591+2286993]\nE       \tBaseThreadInitThunk [0x76FDFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x778D7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x778D7A6E+238]\n\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException"}, "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1639664207557, "stop": 1639664207557, "uuid": "5f70dd4f-6c49-4f51-8c76-56d760190da5", "historyId": "169505ecc760c50f915af090feb1b5c7", "testCaseId": "61795a803f78060dfbefbeae26fea2b8", "fullName": "test_customer_signIn.Test_customer_signIn#test_customer_signIn", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_customer_signIn"}, {"name": "subSuite", "value": "Test_customer_signIn"}, {"name": "host", "value": "LAPTOP-ESSL3DDB"}, {"name": "thread", "value": "16884-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_customer_signIn"}]}