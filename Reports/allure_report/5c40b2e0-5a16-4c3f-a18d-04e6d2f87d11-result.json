{"name": "test_register_Customer[edge]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of MSEdgeDriver only supports MSEdge version 90\nCurrent browser version is 96.0.1054.62 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00007FF634CA5CB2+4676786]\n\tOrdinal0 [0x00007FF63494D677+1169015]\n\tOrdinal0 [0x00007FF63497631A+1336090]\n\tOrdinal0 [0x00007FF634972544+1320260]\n\tOrdinal0 [0x00007FF63496BE29+1293865]\n\tOrdinal0 [0x00007FF6349A373B+1521467]\n\tOrdinal0 [0x00007FF63499F2BF+1503935]\n\tOrdinal0 [0x00007FF634978061+1343585]\n\tOrdinal0 [0x00007FF63497918B+1347979]\n\tOrdinal0 [0x00007FF634A20121+2031905]\n\tOrdinal0 [0x00007FF6349EC73E+1820478]\n\tOrdinal0 [0x00007FF634BC3224+3748388]\n\tOrdinal0 [0x00007FF6349ED10E+1822990]\n\tOrdinal0 [0x00007FF634CB8874+4753524]\n\tOrdinal0 [0x00007FF634CB8174+4751732]\n\tOrdinal0 [0x00007FF634CB7FBA+4751290]\n\tOrdinal0 [0x00007FF634C8FFD8+4587480]\n\tBaseThreadInitThunk [0x00007FFE5DAD7034+20]\n\tRtlUserThreadStart [0x00007FFE5E202651+33]", "trace": "request = <SubRequest 'init_driver' for <Function test_sign_in[edge]>>\n\n    @pytest.fixture(params=['edge'],scope='class')\n    def init_driver(request):\n        if request.param == \"edge\":\n>           value = webdriver.Edge(executable_path=\"resources/msedgedriver.exe\")\n\ntestCases\\conftest.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:62: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.EDGE['browserName'], \"ms\",\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:268: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:359: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000167E3485430>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of MSEd...8FFD8+4587480]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE5DAD7034+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE5E202651+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of MSEdgeDriver only supports MSEdge version 90\nE       Current browser version is 96.0.1054.62 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00007FF634CA5CB2+4676786]\nE       \tOrdinal0 [0x00007FF63494D677+1169015]\nE       \tOrdinal0 [0x00007FF63497631A+1336090]\nE       \tOrdinal0 [0x00007FF634972544+1320260]\nE       \tOrdinal0 [0x00007FF63496BE29+1293865]\nE       \tOrdinal0 [0x00007FF6349A373B+1521467]\nE       \tOrdinal0 [0x00007FF63499F2BF+1503935]\nE       \tOrdinal0 [0x00007FF634978061+1343585]\nE       \tOrdinal0 [0x00007FF63497918B+1347979]\nE       \tOrdinal0 [0x00007FF634A20121+2031905]\nE       \tOrdinal0 [0x00007FF6349EC73E+1820478]\nE       \tOrdinal0 [0x00007FF634BC3224+3748388]\nE       \tOrdinal0 [0x00007FF6349ED10E+1822990]\nE       \tOrdinal0 [0x00007FF634CB8874+4753524]\nE       \tOrdinal0 [0x00007FF634CB8174+4751732]\nE       \tOrdinal0 [0x00007FF634CB7FBA+4751290]\nE       \tOrdinal0 [0x00007FF634C8FFD8+4587480]\nE       \tBaseThreadInitThunk [0x00007FFE5DAD7034+20]\nE       \tRtlUserThreadStart [0x00007FFE5E202651+33]\n\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException"}, "parameters": [{"name": "init_driver", "value": "'edge'"}], "start": 1641813228421, "stop": 1641813228421, "uuid": "6f3952a8-dba3-4c80-a03f-3cd280851c59", "historyId": "04a1088e5e548a5479949f6910cea286", "testCaseId": "6291f82fde1584fc331f6c55ba05dc07", "fullName": "test_register_customer.Test_register_customer#test_register_Customer", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "tag", "value": "regression"}, {"name": "suite", "value": "test_register_customer"}, {"name": "subSuite", "value": "Test_register_customer"}, {"name": "host", "value": "LAPTOP-ESSL3DDB"}, {"name": "thread", "value": "10420-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_register_customer"}]}