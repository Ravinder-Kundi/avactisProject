{"name": "test_register_Customer[edge]", "status": "broken", "statusDetails": {"message": "OSError: [WinError 216] This version of %1 is not compatible with the version of Windows you're running. Check your computer's system information and then contact the software publisher", "trace": "request = <SubRequest 'init_driver' for <Function test_sign_in[edge]>>\n\n    @pytest.fixture(params=['edge'],scope='class')\n    def init_driver(request):\n        if request.param == \"edge\":\n>           value = webdriver.Edge(executable_path=\"resources/msedgedriver.exe\")\n\ntestCases\\conftest.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:62: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.EDGE['browserName'], \"ms\",\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:90: in __init__\n    self.service.start()\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:71: in start\n    self.process = subprocess.Popen(cmd, env=self.env,\nC:\\Program Files (x86)\\Python39\\lib\\subprocess.py:951: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: None args: ['resources/msedgedriver.exe', '--port=55218']>, args = 'resources/msedgedriver.exe --port=55218', executable = None, preexec_fn = None\nclose_fds = False, pass_fds = (), cwd = None\nenv = environ({'__INTELLIJ_COMMAND_HISTFILE__': 'C:\\\\Users\\\\rubyk\\\\AppData\\\\Local\\\\JetBrains\\\\PyCharmCE2021.2\\\\terminal\\\\his...32', 'PYTEST_CURRENT_TEST': 'test_register_customer.py::Test_register_customer::test_register_Customer[edge] (setup)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x000001715CDD7E20>, creationflags = 0, shell = False, p2cread = Handle(736), p2cwrite = 6, c2pread = -1, c2pwrite = Handle(684)\nerrread = -1, errwrite = Handle(664), unused_restore_signals = True, unused_gid = None, unused_gids = None, unused_uid = None, unused_umask = -1, unused_start_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    OSError: [WinError 216] This version of %1 is not compatible with the version of Windows you're running. Check your computer's system information and then contact the software publisher\n\nC:\\Program Files (x86)\\Python39\\lib\\subprocess.py:1420: OSError"}, "parameters": [{"name": "init_driver", "value": "'edge'"}], "start": 1641814628917, "stop": 1641814628917, "uuid": "24ae34e2-e758-4b54-bf5b-3948ced75e26", "historyId": "04a1088e5e548a5479949f6910cea286", "testCaseId": "6291f82fde1584fc331f6c55ba05dc07", "fullName": "test_register_customer.Test_register_customer#test_register_Customer", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "suite", "value": "test_register_customer"}, {"name": "subSuite", "value": "Test_register_customer"}, {"name": "host", "value": "LAPTOP-ESSL3DDB"}, {"name": "thread", "value": "8540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_register_customer"}]}