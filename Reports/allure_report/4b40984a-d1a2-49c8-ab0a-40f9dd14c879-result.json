{"name": "test_customer_signIn[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=96.0.4664.110)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00DA6903+2517251]\n\tOrdinal0 [0x00D3F8E1+2095329]\n\tOrdinal0 [0x00C42848+1058888]\n\tOrdinal0 [0x00C3F431+1045553]\n\tOrdinal0 [0x00C354D9+1004761]\n\tOrdinal0 [0x00C360E0+1007840]\n\tOrdinal0 [0x00C3572A+1005354]\n\tOrdinal0 [0x00C34DDA+1002970]\n\tOrdinal0 [0x00C33F8D+999309]\n\tOrdinal0 [0x00C34246+1000006]\n\tOrdinal0 [0x00C43E1A+1064474]\n\tOrdinal0 [0x00C9616D+1401197]\n\tOrdinal0 [0x00C864D3+1336531]\n\tOrdinal0 [0x00C95BBF+1399743]\n\tOrdinal0 [0x00C8639B+1336219]\n\tOrdinal0 [0x00C627A7+1189799]\n\tOrdinal0 [0x00C63609+1193481]\n\tGetHandleVerifier [0x00F35904+1577972]\n\tGetHandleVerifier [0x00FE0B97+2279047]\n\tGetHandleVerifier [0x00E36D09+534521]\n\tGetHandleVerifier [0x00E35DB9+530601]\n\tOrdinal0 [0x00D44FF9+2117625]\n\tOrdinal0 [0x00D498A8+2136232]\n\tOrdinal0 [0x00D499E2+2136546]\n\tOrdinal0 [0x00D53541+2176321]\n\tBaseThreadInitThunk [0x76EDFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77227A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77227A6E+238]", "trace": "self = <testCases.test_customer_signIn.Test_customer_signIn object at 0x0000017D908E9C10>\n\n    @pytest.mark.sanity\n    @pytest.mark.regression\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_customer_signIn(self):\n    \n>       self.c_sign = RegisterCustomer(self.driver)\n\ntestCases\\test_customer_signIn.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects\\register_customer_page.py:36: in __init__\n    self.driver.get(ReadConfig.getStoreUrl())\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:436: in get\n    self.execute(Command.GET, {'url': url})\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017D908E9550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77227A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77227A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=96.0.4664.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00DA6903+2517251]\nE       \tOrdinal0 [0x00D3F8E1+2095329]\nE       \tOrdinal0 [0x00C42848+1058888]\nE       \tOrdinal0 [0x00C3F431+1045553]\nE       \tOrdinal0 [0x00C354D9+1004761]\nE       \tOrdinal0 [0x00C360E0+1007840]\nE       \tOrdinal0 [0x00C3572A+1005354]\nE       \tOrdinal0 [0x00C34DDA+1002970]\nE       \tOrdinal0 [0x00C33F8D+999309]\nE       \tOrdinal0 [0x00C34246+1000006]\nE       \tOrdinal0 [0x00C43E1A+1064474]\nE       \tOrdinal0 [0x00C9616D+1401197]\nE       \tOrdinal0 [0x00C864D3+1336531]\nE       \tOrdinal0 [0x00C95BBF+1399743]\nE       \tOrdinal0 [0x00C8639B+1336219]\nE       \tOrdinal0 [0x00C627A7+1189799]\nE       \tOrdinal0 [0x00C63609+1193481]\nE       \tGetHandleVerifier [0x00F35904+1577972]\nE       \tGetHandleVerifier [0x00FE0B97+2279047]\nE       \tGetHandleVerifier [0x00E36D09+534521]\nE       \tGetHandleVerifier [0x00E35DB9+530601]\nE       \tOrdinal0 [0x00D44FF9+2117625]\nE       \tOrdinal0 [0x00D498A8+2136232]\nE       \tOrdinal0 [0x00D499E2+2136546]\nE       \tOrdinal0 [0x00D53541+2176321]\nE       \tBaseThreadInitThunk [0x76EDFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77227A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77227A6E+238]\n\n..\\Virtual Environmemts\\New Venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException"}, "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1641825448282, "stop": 1641825461176, "uuid": "ffb96d7f-c17e-48c8-b5b3-409cc46ce43a", "historyId": "169505ecc760c50f915af090feb1b5c7", "testCaseId": "61795a803f78060dfbefbeae26fea2b8", "fullName": "test_customer_signIn.Test_customer_signIn#test_customer_signIn", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "suite", "value": "test_customer_signIn"}, {"name": "subSuite", "value": "Test_customer_signIn"}, {"name": "host", "value": "LAPTOP-ESSL3DDB"}, {"name": "thread", "value": "16992-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_customer_signIn"}]}